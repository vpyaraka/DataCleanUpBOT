# -*- coding: utf-8 -*-
"""DataCleansingBOT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bh7hbBRCkBz5C9mUXR_lAPuTN0Y3Mc3I
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from fpdf import FPDF
import tempfile
import os

# =========================
# PDF Report Generator
# =========================
def generate_pdf_report(dataframe, summary_text, plots, sections):
    pdf = FPDF()
    pdf.add_page()

    # Use built-in Helvetica (ASCII only)
    pdf.set_font("Helvetica", size=16)
    pdf.cell(200, 10, "Data Cleansing & Insights Report", ln=True, align="C")
    pdf.ln(10)

    # Summary
    pdf.set_font("Helvetica", size=12)
    pdf.multi_cell(0, 10, f"Summary:\n{summary_text}")
    pdf.ln(10)

    # Sections
    for section_title, section_content in sections.items():
        pdf.set_font("Helvetica", size=14)
        pdf.cell(0, 10, section_title, ln=True)
        pdf.set_font("Helvetica", size=12)
        pdf.multi_cell(0, 10, section_content)
        pdf.ln(5)

    # Add plots
    for plot_path in plots:
        pdf.add_page()
        pdf.image(plot_path, x=10, y=20, w=180)

    # Save PDF to temp file
    tmp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp_pdf.name)
    return tmp_pdf.name


# =========================
# Streamlit App
# =========================
def main():
    st.set_page_config(page_title="Data Cleansing BOT", layout="wide")
    st.title("Data Cleansing & Insights BOT")

    uploaded_file = st.file_uploader("Upload CSV or Excel", type=["csv", "xlsx"])

    if uploaded_file:
        # Load data
        try:
            if uploaded_file.name.endswith(".csv"):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
        except Exception as e:
            st.error(f"Error loading file: {e}")
            return

        st.subheader("Preview of Data")
        st.dataframe(df.head())

        # Basic Summary
        summary = []
        summary.append(f"Total Rows: {df.shape[0]}")
        summary.append(f"Total Columns: {df.shape[1]}")
        summary.append(f"Missing Values: {df.isnull().sum().sum()}")
        summary.append(f"Duplicate Rows: {df.duplicated().sum()}")
        summary_text = "\n".join(summary)

        # Sections
        sections = {
            "Dataset Shape": str(df.shape),
            "Columns": ", ".join(df.columns),
            "Missing Values": str(df.isnull().sum().to_dict()),
            "Data Types": str(df.dtypes.to_dict())
        }

        # Plots
        plots = []
        if not df.select_dtypes(include=np.number).empty:
            plt.figure(figsize=(6, 4))
            sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm")
            tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
            plt.savefig(tmpfile.name)
            plots.append(tmpfile.name)
            plt.close()

        # Generate PDF
        pdf_path = generate_pdf_report(df, summary_text, plots, sections)

        # Download buttons
        st.download_button("Download Cleaned CSV", df.to_csv(index=False).encode("utf-8"),
                           file_name="cleaned_data.csv", mime="text/csv")
        st.download_button("Download Cleaned Excel", df.to_excel("cleaned_data.xlsx", index=False, engine="xlsxwriter"),
                           file_name="cleaned_data.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        with open(pdf_path, "rb") as f:
            st.download_button("Download PDF Report", f, file_name="data_report.pdf", mime="application/pdf")


if __name__ == "__main__":
    main()