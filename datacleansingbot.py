# -*- coding: utf-8 -*-
"""DataCleansingBOT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Bh7hbBRCkBz5C9mUXR_lAPuTN0Y3Mc3I
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from fpdf import FPDF
import tempfile
import os

# Function to create PDF Report
def generate_pdf_report(dataframe, summary_text, sections):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    # Title
    pdf.set_font("Arial", 'B', 14)
    pdf.cell(200, 10, "üìä Data Cleansing & Insights Report", ln=True, align="C")
    pdf.ln(10)

    # Narrative Summary
    if sections.get("summary", False):
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, "üîé Summary Insights", ln=True)
        pdf.set_font("Arial", size=11)
        for line in summary_text.split("\n"):
            pdf.multi_cell(0, 8, line)
        pdf.ln(5)

    # Missing Values
    if sections.get("missing", False):
        pdf.set_font("Arial", 'B', 12)
        pdf.cell(200, 10, "‚ùå Missing Values", ln=True)
        missing = dataframe.isnull().sum()
        for col, val in missing.items():
            pdf.set_font("Arial", size=11)
            pdf.cell(200, 8, f"{col}: {val} missing", ln=True)
        pdf.ln(5)

    # Correlation Heatmap
    if sections.get("correlation", False):
        fig, ax = plt.subplots(figsize=(6,4))
        sns.heatmap(dataframe.corr(numeric_only=True), annot=True, cmap="coolwarm", ax=ax)
        tmpfile = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
        plt.savefig(tmpfile.name)
        plt.close(fig)
        pdf.image(tmpfile.name, w=150)
        os.unlink(tmpfile.name)
        pdf.ln(5)

    # Save PDF
    tmp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    pdf.output(tmp_pdf.name)
    return tmp_pdf.name


# ---------------- Streamlit UI ----------------

st.title("ü§ñ Data Cleansing & Insights BOT")

uploaded_file = st.file_uploader("Upload CSV/Excel", type=["csv", "xlsx"])

if uploaded_file is not None:
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file)
    else:
        df = pd.read_excel(uploaded_file)

    st.write("‚úÖ File Loaded:", df.shape)
    st.dataframe(df.head())

    # Sections to include
    st.sidebar.header("üìë Report Sections")
    sections = {
        "summary": st.sidebar.checkbox("Summary", value=True),
        "missing": st.sidebar.checkbox("Missing Values", value=True),
        "correlation": st.sidebar.checkbox("Correlation Heatmap", value=True),
    }

    # Rule-based narrative
    summary_text = f"""
    The dataset has {df.shape[0]} rows and {df.shape[1]} columns.
    The column with the most missing values is "{df.isnull().sum().idxmax()}".
    The most correlated pair is identified in the correlation heatmap.
    """

    if st.button("Generate PDF Report"):
        pdf_path = generate_pdf_report(df, summary_text, sections)
        with open(pdf_path, "rb") as f:
            st.download_button("üì• Download PDF Report", f, file_name="data_insights_report.pdf")